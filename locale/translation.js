// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Bus');
gettext('Inputs');
gettext('Outputs');
gettext('VIB-Input-Bus');
gettext('Virtual Input Bus: Virtual inputs components receiver');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('Comparador de un operando de 8 bits. Se compara si el operando es igual al parámetro');
gettext('Puerta OR');
gettext('Puerta AND');
gettext('Virtual input bus Joiner');
gettext('Receptor serie asíncrono. Velocidad por defecto: 115200 baudios');
gettext('One cycle after the EOL character  \nis received, the bus is reset');
gettext('## Virtual Input Bus\n\nIt receives the commands generated by the virtual components  \nand it sents them thought the VIB bus');
gettext('**Serial receiver**');
gettext('an End of line character  \ndetected: CR or LF');
gettext('This tick indicates that  \nan eol character has  \nbeen received');
gettext('**VIB BUS**');
gettext('End of command received: All the  \nreceivers connnected to the bus should  \ngo to its initial state for detecting  \nthe next command');
gettext('Signal: End of Line received  \nIt is detected here for optimization  \npurposes. This way the receivers should  \nnot implement the EOL detection');
gettext('VIB-Split');
gettext('Virtual input bus Splitter');
gettext('VIB-join');
gettext('Switch-First');
gettext('Virtual Switch. Place the first in the Bus chain');
gettext('Componente genérico');
gettext('char syntax block');
gettext('Demultiplexor de 1 bit, de 1 a 2');
gettext('Biestable con entradas de Set y Reset síncronas, para poner y quitar notaficaciones de eventos');
gettext('Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente');
gettext('bit syntax block');
gettext('Un bit constante a 0');
gettext('Extractor de 1 bit de un bus de 8 bits');
gettext('Syntax End Of Line. Last block when detecting a command');
gettext('# Virtual Switch-first\n\nThis component should be placed in the  \nfirst place. It creates the Virtual  \ninput BUS for connecting other blocks');
gettext('**Virtual Input Bus**');
gettext('The bit received from the virtual  \ncomponent is stored in this flip-flop');
gettext('When the virtual switch  \nis changed, a tic es emited');
gettext('The swith has changed  \nto the ON state');
gettext('The swicth has changed  \nto the OFF state');
gettext('# Virtual Switch\n\nProcess the commands from the virtual components  \nGet the bit if the messages is for this switch');
gettext('## Syntax Char  \n\nSyntax block for receiving a specific character  \n\nWhen the character recived is what the block is expecting,  \nit gets activated, and the blocks becomes into a wire (transparent mode)  \nuntil it is reset\n\nIf the first received character is different from what it was expecting,  \nthen block blocks. it disconnect itself from the input until it is reset');
gettext('**Reset the block**');
gettext('**Input character**');
gettext('**Active state**  \n0: Block is not active  \n1: In Active mode');
gettext('Depending on the mode, the tic  \nreceived is outputed (transparent mode)\nor sent inside the block for further processing\n');
gettext('Transparent mode');
gettext('Ignored');
gettext('If the block is blocked, the tic  \nis ignored. Else the tic is sent  \nto the next stage for further processing');
gettext('**Expected character**');
gettext('State of the received character  \n0: Not the one was expected   \n1: The one that was expected  ');
gettext('Expected character  \nreceived: Change to   \nactive mode');
gettext('Other character received:  \nBlock the component');
gettext('**Block state**  \n0: Not blocked\n1: Blocked');
gettext('## Syntax Bit  \n\nSyntax block for receiving a bit ('0'/'1')\n\nWhen the character recived is a bit,  \nit gets activated, and the blocks becomes into a wire (transparent mode)  \nuntil it is reset\n\nIf the first received character is not a bit,  \nthe block blocks. it disconnects itself from the input until it is reset');
gettext('State of the received character  \n0: No bit symbol received  \n1: Bit received ');
gettext('Bit received:  \nChange to   \nactive mode');
gettext('**Block state**  \n0: Not blocked  \n1: Blocked');
gettext('Capture the bit  \nreceived');
gettext('Last block:  \nIt is blocked with any  \ncharactere received');
gettext('The received char was  \nan END of LINE: OK!');
gettext('## Syntax EOL\n\nThis block should be the last one. It checks if the last correct  \ncharactere received is an end-of-line\n\nAs it is the last block, it always get blocked when a characterer  \narrives. If it is an EOL, it is send through the ok_tic\n');
gettext('Switch');
gettext('01-switch-LED');
gettext('# Example 1: Switch-First\n\nExample of one virtual switch  \nThe virtual switch is connected to the LED7  ');
gettext('## Web panel for testing\n\nFor testing this example upload it to the  \nFPGA and connect to the [ONE switch WEB panel](https://fpgawars.github.io/LOVE-FPGA/Web-panels/One-Switch/panel.html)  \n(You should use a Browser that support **Webserial**, like **Chromium** or **Chrome**)  \nYou do not need to install anything. Just the browser\n\n[Panel Image](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/One-Switch/wiki/panel-03.png)\n\n![](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/One-Switch/wiki/panel-03.png)');
gettext('## Youtube Video\n\n[Link](https://www.youtube.com/watch?v=S3cI9lfasgU)\n\n[![Click to see the youtube video](http://img.youtube.com/vi/S3cI9lfasgU/0.jpg)](https://www.youtube.com/watch?v=S3cI9lfasgU)');
