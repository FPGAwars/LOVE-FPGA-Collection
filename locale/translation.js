// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Bus');
gettext('Inputs');
gettext('Outputs');
gettext('VIB-Input-Bus');
gettext('Virtual Input Bus: Virtual inputs components receiver');
gettext('Comparador de un operando de 8 bits. Se compara si el operando es igual al parámetro');
gettext('Puerta OR');
gettext('Puerta AND');
gettext('Virtual input bus Joiner');
gettext('Receptor serie asíncrono. Velocidad por defecto: 115200 baudios');
gettext('System - D Flip-flop. Capture data every system clock cycle. Verilog implementation');
gettext('One cycle after the EOL character  \nis received, the bus is reset');
gettext('## Virtual Input Bus\n\nIt receives the commands generated by the virtual components  \nand it sents them thought the VIB bus');
gettext('**Serial receiver**');
gettext('an End of line character  \ndetected: CR or LF');
gettext('This tick indicates that  \nan eol character has  \nbeen received');
gettext('**VIB BUS**');
gettext('End of command received: All the  \nreceivers connnected to the bus should  \ngo to its initial state for detecting  \nthe next command');
gettext('Signal: End of Line received  \nIt is detected here for optimization  \npurposes. This way the receivers should  \nnot implement the EOL detection');
gettext('Parameter: Initial value');
gettext('System clock');
gettext('Input data');
gettext('Output');
gettext('# D Flip-Flop  (system)\n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Not connected');
gettext('VIB-Split');
gettext('Virtual input bus Splitter');
gettext('VIB-join');
gettext('VOB-Output-Bus');
gettext('Virtual Output Bus');
gettext('Virtual output bus Joiner');
gettext('Un bit constante a 0');
gettext('Valor constante 0 para bus de 8 bits');
gettext('Valor genérico constante, de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Virtual output bus Splitter');
gettext('Extractor de 1 bit de un bus de 8 bits');
gettext('Print a Bit variable + LF');
gettext('DFF. D Flip-flop. Verilog implementation');
gettext('08-Reg: 8 bits Register. Verilog implementation');
gettext('Transmit one character to the STDOUT bus');
gettext('Extract the next signal from the stdout bus');
gettext('stdout bus joiner (data + tic)');
gettext('Biestable de almacenamiento del estado de la máquina');
gettext('Puerta NOT');
gettext('RS-FF-set-verilog. RS Flip-flop with priority set. Implementation in verilog');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input. Block implementation');
gettext('NOT gate (Verilog implementation)');
gettext('Two bits input And gate');
gettext('Falling-edge detector. It generates a 1-period pulse (tic) when a falling edge is detected on the input');
gettext('2-to-1 Multplexer (10-bit channels). Verilog implementation');
gettext('Print a bit plus a new line');
gettext(' Transmit one bit as a character. STDOUT-bus');
gettext('2-to-1 Multplexer (8-bit channels). Verilog implementation');
gettext('8bits ASCII new line');
gettext('Generic: 8-bits generic constant (0-255)');
gettext('Serial transmiter for the stdout bus, with sysclk parameter');
gettext('stdout bus splitter into data and tic signals');
gettext('Convert the 1-bit next signal into a 10-bit stdout bus');
gettext('Serial transmitter with system clock freq parameter');
gettext('Send the string \"a0\\n\"  \nor \"a1\\n\"');
gettext('## Virtual Output Bus\n\nIt receives the information from the Output Virtual devices  \nand sends the messages to the PC though the serial port\n');
gettext('Bus: information from the other  \nelements connected to the VOB  ');
gettext('Get the diffent fields on the bus');
gettext('Boolean variable name');
gettext('Boolean variable value');
gettext('Request bus Tic  \nSend the message!');
gettext('Serial transmitter');
gettext('The busy signal is sent to the bus  \nThe rest of the signals are  \nset to 0');
gettext('**STDOUT BUS**');
gettext('## PRINTLN-bit-var\n\nPrint a Bit Variable. The output format is:  \n< Varname > < Bit > < LN >  \nWehre < Varname >  is a 1-char variable identifier\n\nExample: \"a1\\n\"');
gettext('Print the Variable  \nidentfifies');
gettext('Print the variable  \nbit value + \\n');
gettext('Before print, both variable name  \nand variable value are store into  \na register');
gettext('Store the variable  \nname');
gettext('Store the bit  \nvalue');
gettext('This print machine  \ngets busy as soon as  \nthe print gets high');
gettext('## PUTC: Transmit one character (STDOUT bus)\n\nWhen **idle**, the STDOUT bus crosses the component without modification    \n\nWhen the machine starts, the char is outputed and the state is changed to busy  \nWhen the transmitter is done (tic received in next)  the machine is turned off');
gettext('Start tic: The byte from the  \ninput char is transmited');
gettext('Char to be transmited');
gettext('State of the machine:  \n1: ON: transmitting  \n2: OFF: transparent mode  ');
gettext('If the machine is on  \nand the character has been  \ntransmitted: Turn it off');
gettext('The machine has finished');
gettext('**Create the bus**  \nfrom the data and tic signals');
gettext('Transparent mode...  \nor not');
gettext('**Tic de apagado**');
gettext('**Tic de encendido**');
gettext('**Inicializar**');
gettext('**Estado de la máquina**');
gettext('## Rising edge detector\n\nIt generates a 1-period pulse (tic) when a rising edge is detected on the  \ninput signal');
gettext('Input signal');
gettext('Current signal  \nstate');
gettext('Signal state in the previous  \nclock cycle');
gettext('If the current signal is 1 and its value in  \nthe previous clock cycle was 0, it means  \nthat a rising edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a rising edge  \nand its detection');
gettext('Input');
gettext('## Falling edge detector\n\nIt generates a 1-period pulse (tic) when a falling edge is detected on the  \ninput signal');
gettext('If the current signal is 0 and its value in  \nthe previous clock cycle was 1, it means  \nthat a falling edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a falling edge  \nand its detection');
gettext('## PrintLn-bit: Print one bit plus a new line character  \n');
gettext('Bit to be transmited');
gettext('Transmit now! (tic)  \nActivate the machine');
gettext('**Block 1**  \nPrint the bit (0,1)');
gettext('The machine is busy either  \nthe block 1 is busy or  \nthe block 2 is busy');
gettext('**Block 2**  \nPrint new line char');
gettext('## PUTC-bit-stdout: Transmit one bit (STDOUT bus)  \n\nWhen activated, the bit input is sent as the character '0' or '1'  \nWhen not active, the stdout crossed the block (transparent mode)');
gettext('The bit to be transmitted should be  \nsyncronized with its transmit tic');
gettext('If the machine is ready and  \nthe next tic is received:  \nwe are done');
gettext('The machine is done');
gettext('Machine is on: send a character');
gettext('State of the machine  \n0: OFF  \n1: ON: Sending one character');
gettext('Character to transmit when  \nthe input bit is 1');
gettext('Character to transmit when  \nthe input bit is 0');
gettext('Select with character to transmit  \naccording to the input bit');
gettext('## STDOUT serial\n\nSerial transmitter for the STDOUT bus\n');
gettext('**STDOUT Bus**  \n* Data to transmit (8 bits)  \n* tic (1 bit)\n* data sent (done tic, 1 bit)');
gettext('VOB-Split');
gettext('VOB-join');
gettext('Pushbuttonx1');
gettext('Pushbuttonx2');
gettext('Pushbuttonx4');
gettext('Switchx1');
gettext('Switchx16');
gettext('Switchx2');
gettext('Switchx3');
gettext('Switchx32');
gettext('Switchx4');
gettext('Switchx8');
gettext('PushButtonx1-bus');
gettext('Virtual-pushbutton. Bus block');
gettext('Virtual switch (1-bit). Bus block');
gettext('Demultiplexor de 1 bit, de 1 a 2');
gettext('DFF-rst. D Flip-Flop with load and reset. Implemented in verilog');
gettext('char syntax block');
gettext('bit syntax block');
gettext('Syntax End Of Line. Last block when detecting a command');
gettext('The block is exactly the same than the  \nswitch-bus, but with another icon');
gettext('**Virtual Input Bus**');
gettext('The bit received from the virtual  \ncomponent is stored in this flip-flop');
gettext('When the virtual switch  \nis changed, a tic es emited');
gettext('The swith has changed  \nto the ON state');
gettext('The swicth has changed  \nto the OFF state');
gettext('# Virtual Switch\n\nProcess the commands from the virtual components  \nGet the bit if the messages is for this switch');
gettext('## Syntax Char  \n\nSyntax block for receiving a specific character  \n\nWhen the character recived is what the block is expecting,  \nit gets activated, and the blocks becomes into a wire (transparent mode)  \nuntil it is reset\n\nIf the first received character is different from what it was expecting,  \nthen block blocks. it disconnect itself from the input until it is reset');
gettext('**Reset the block**');
gettext('**Input character**');
gettext('**Active state**  \n0: Block is not active  \n1: In Active mode');
gettext('Depending on the mode, the tic  \nreceived is outputed (transparent mode)\nor sent inside the block for further processing\n');
gettext('Transparent mode');
gettext('Ignored');
gettext('If the block is blocked, the tic  \nis ignored. Else the tic is sent  \nto the next stage for further processing');
gettext('**Expected character**');
gettext('State of the received character  \n0: Not the one was expected   \n1: The one that was expected  ');
gettext('Expected character  \nreceived: Change to   \nactive mode');
gettext('Other character received:  \nBlock the component');
gettext('**Block state**  \n0: Not blocked\n1: Blocked');
gettext('## Syntax Bit  \n\nSyntax block for receiving a bit ('0'/'1')\n\nWhen the character recived is a bit,  \nit gets activated, and the blocks becomes into a wire (transparent mode)  \nuntil it is reset\n\nIf the first received character is not a bit,  \nthe block blocks. it disconnects itself from the input until it is reset');
gettext('State of the received character  \n0: No bit symbol received  \n1: Bit received ');
gettext('Bit received:  \nChange to   \nactive mode');
gettext('**Block state**  \n0: Not blocked  \n1: Blocked');
gettext('Capture the bit  \nreceived');
gettext('Last block:  \nIt is blocked with any  \ncharactere received');
gettext('The received char was  \nan END of LINE: OK!');
gettext('## Syntax EOL\n\nThis block should be the last one. It checks if the last correct  \ncharactere received is an end-of-line\n\nAs it is the last block, it always get blocked when a characterer  \narrives. If it is an EOL, it is send through the ok_tic\n');
gettext('PushButtonx1-rx');
gettext('Virtual pushbutton. Receiving unit');
gettext('Virtual Switch. Receiving unit');
gettext('The block is exactly the same than the  \nswitch-rx, but with a different icon');
gettext('# Virtual Switch-first\n\nThis component should be placed in the  \nfirst place. It creates the Virtual  \ninput BUS for connecting other blocks');
gettext('PushButtonx1');
gettext('One virtual pushbutton');
gettext('One Virtual Switch');
gettext('The block is exactly the same than the  \nswitchx1, but with a different icon');
gettext('# Virtual Switchx1\n\nJust one vitual switch connected directly  \nto the RX serial pin');
gettext('Pushbuttonx2-bus');
gettext('Two Virtual pushbuttons. Bus unit');
gettext('Two Virtual Switches. Bus unit');
gettext('Agregador de 2 cables en un bus de 2-bits');
gettext('# Pushbuttonx2-Bus\n\nReceives the state of two virtual Inputs');
gettext('# Switchx2-Bus\n\nReceives the state of two virtual Inputs');
gettext('Pushbuttonx2-rx');
gettext('Two Virtual Pushbuttons. Receiving unit');
gettext('Two Virtual Switches. Receiving unit');
gettext('# Pushbutonx2-RX\n\nReceives the state of two virtual Inputs');
gettext('# Switchx2-RX\n\nReceives the state of two virtual Inputs');
gettext('Pushbuttonx2');
gettext('Two Virtual Pushbuttons');
gettext('Two Virtual Switches');
gettext('# Pushbuttonsx2\n\nReceives the state of two virtual Inputs  \nIt is exactly the same than the switchx2 block,  \nbut with a different icon');
gettext('# Switchx2\n\nReceives the state of two virtual Inputs');
gettext('Pushbuttonx4-bus');
gettext('Four Virtual Pushbuttons. Bus unit');
gettext('Four Virtual Switches. Bus unit');
gettext('Agregador de buses de 2-bits a bus de 4-bits');
gettext('# Pushbuttonx4-Bus\n\nReceives the state of four virtual Inputs');
gettext('# Switchx4-Bus\n\nReceives the state of four virtual Inputs');
gettext('Pushbuttonx4-rx');
gettext('Four Virtual Pushbuttons. Receiving unit');
gettext('Four Virtual Switches. Receiving unit');
gettext('# PUshbuttonx4-RX\n\nReceives the state of four virtual Inputs');
gettext('# Switchx4-RX\n\nReceives the state of four virtual Inputs');
gettext('Pushbuttonx4');
gettext('Four Virtual buttons');
gettext('# Pushbuttonx4\n\nReceives the state of four virtual Inputs');
gettext('Switchx1-bus');
gettext('Switchx1-rx');
gettext('Switchx1');
gettext('Switchx16-bus');
gettext('16 Virtual Switches. Bus unit');
gettext('Agregador de 2 buses de 8-bits a bus de 16-bits');
gettext('8 Virtual Switches. Bus unit');
gettext('Agregador de 2 buses de 4-bits a bus de 8-bits');
gettext('# Switchx16-Bus\n\nReceives the state of four virtual Inputs');
gettext('# Switchx8-Bus\n\nReceives the state of four virtual Inputs');
gettext('Switchx16-rx');
gettext('16 Virtual Switches. Receiving unit');
gettext('8 Virtual Switches. Receiving unit');
gettext('# Switchx16-RX\n\nReceives the state of four virtual Inputs');
gettext('# Switchx8-RX\n\nReceives the state of four virtual Inputs');
gettext('Switchx16');
gettext('16 Virtual Switches');
gettext('# Switchx16\n\nReceives the state of four virtual Inputs');
gettext('Switchx2-bus');
gettext('Switchx2-rx');
gettext('Switchx2');
gettext('Switchx3-bus');
gettext('Three Virtual Switches. Bus unit');
gettext('Bus joiner: 2-bits + 1bits into a 3-bits bus');
gettext('# Switchx3-Bus\n\nReceives the state of 3 virtual Inputs');
gettext('Switchx3-rx');
gettext('Three Virtual Switches. Receiving unit');
gettext('# Switchx3-RX\n\nReceives the state of 3 virtual Inputs');
gettext('Switchx3');
gettext('Three Virtual Switches');
gettext('# Switchx3\n\nReceives the state of four virtual Inputs');
gettext('Switchx32-bus');
gettext('32 Virtual Switches.Bus unit');
gettext('Join two 16-bits buses into 32-bit buses');
gettext('Switchx32-rx');
gettext('32 Virtual Switches. Receiving unit');
gettext('Switchx32');
gettext('32 Virtual Switches');
gettext('Switchx4-Bus');
gettext('Switchx4-rx');
gettext('Switchx4');
gettext('Four Virtual Switches');
gettext('# Switchx4\n\nReceives the state of four virtual Inputs');
gettext('Switchx8-bus');
gettext('Switchx8-rx');
gettext('Switchx8');
gettext('8 Virtual Switches');
gettext('# Switchx8\n\nReceives the state of four virtual Inputs');
gettext('LEDx1');
gettext('LEDx16');
gettext('LEDx2');
gettext('LEDx3');
gettext('LEDx32');
gettext('LEDx4');
gettext('LEDx8');
gettext('LEDx1-BUS');
gettext('One Virtual LED with bus expansion');
gettext('Puerta XOR');
gettext('Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente');
gettext('Agregador de un bus de 7 bits y un cable a bus de 8-bits');
gettext('2-to-1 Multplexer (18-bit channels). Verilog implementation');
gettext('Is the current bit  \ndifferent than the  \nprevious?');
gettext('Yes');
gettext('Store the bit that is being  \ntransmitter');
gettext('# Virtual LED\n\nTurn on a virtual LED. The information is sent  \nthough the VOB bus');
gettext('When the block is actived, it  \ntakes the bus and send its  \ninformation. Otherwise it is transparent');
gettext('Get the signal from the VOB that  \nneeded for this component');
gettext('Another component  \nis using the bus');
gettext('Initialization state:  \n0 : The component has not sent its  \n    initial state yet  \n1 : The initialization is done');
gettext('Send the initial state');
gettext('Actived sinal: The LED is sending a bit  \n0 : The LED is not sending anything  \n1 : Send a bit');
gettext('Bit to send: either the one on the  \ninput or a 0 if it is the first time');
gettext('This is for sending bits ONLY if the  \ninput is different than the bit  \npreviously sent');
gettext('It only sends if the transmiter is  \nnot busy');
gettext('There is new bit to  \nbe sent');
gettext('If other is using the bus:  \nthe request cannot be sent');
gettext('The bit can be sent!');
gettext('Whenever a bit is transmited,  \nthe initialization is stoped!');
gettext('LEDx1-tx');
gettext('# Virtual LED-tx\n\nComponent for turning on a Virtual LED  \nIt should be placed in the last output position  ');
gettext('LEDx1');
gettext('# LEDx1\n\nOne virtual LED');
gettext('LEDx16-bus');
gettext('16 virtual LEDs. Bus block');
gettext('Separador de bus de 16-bits en buses de 8 bits');
gettext('Eight virtual LEDs. Bus block');
gettext('Separador de bus de 8-bits en buses de 4 bits');
gettext('Four virtual LEDs. Bus block');
gettext('Separador de bus de 4-bits en 4 cables');
gettext('LEDx16-tx');
gettext('16 virtual LEDs. Transmision block');
gettext('Eight virtual LEDs. Transmision block');
gettext('Four virtual LEDs. Transmision block');
gettext('LEDx16');
gettext('16 virtual LEDs');
gettext('LEDx2-bus');
gettext('Two Virtual LEDs. Bus element');
gettext('Separador de bus de 2-bits en dos cables');
gettext('**LED Virtual**');
gettext('LEDx2-tx');
gettext('Two Virtual LEDs. Transmission block');
gettext('LEDx2');
gettext('**2 LEDs Virtuales**');
gettext('LEDx3-bus');
gettext('Three Virtual LEDs. Bus unit');
gettext('Separador de bus de 3-bits, en dos de 1 y 2 bits');
gettext('**3 Virtual LEDs**');
gettext('LEDx3-tx');
gettext('Three Virtual LEDs. Transmision unit');
gettext('LEDx3');
gettext('Three Virtual LEDs');
gettext('LEDx32-tx');
gettext('32 virtual LEDs. Transmision block');
gettext('Separador de bus de 32-bits en buses de 16 bits');
gettext('LEDx32');
gettext('32 virtual LEDs');
gettext('LEDx4-bus');
gettext('LEDx4-tx');
gettext('LEDx4');
gettext('Four virtual LEDs');
gettext('LEDx8-bus');
gettext('LEDx8-tx');
gettext('LEDx8');
gettext('Eight virtual LEDs');
gettext('CT8-Examples');
gettext('Test');
gettext('01-switch-LED');
gettext('# Example 1: Switchx1\n\nExample of one virtual switch  \nThe virtual switch is connected to the LED7  ');
gettext('## Web panel for testing\n\nFor testing this example upload it to the  \nFPGA and connect to the [ONE switch WEB panel](https://fpgawars.github.io/LOVE-FPGA/Web-panels/One-Switch/panel.html)  \n(You should use a Browser that support **Webserial**, like **Chrome**)  \nYou do not need to install anything. Just the browser\n\n[Panel Image](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/One-Switch/wiki/panel-03.png)\n\n![](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/One-Switch/wiki/panel-03.png)');
gettext('## Youtube Video\n\n[Link](https://www.youtube.com/watch?v=S3cI9lfasgU)\n\n[![Click to see the youtube video](http://img.youtube.com/vi/S3cI9lfasgU/0.jpg)](https://www.youtube.com/watch?v=S3cI9lfasgU)');
gettext('02-switchx2-LEDx2');
gettext('# Example 2: Switch\n\nExample of two virtual switches  \nVirtual switch \"a\" connected to LED7  \nVirtual switch \"b\" connected to LED0');
gettext('## Web panel for testing\n\nFor testing this example upload it to the  \nFPGA and connect to the [TWO switches WEB panel](https://fpgawars.github.io/LOVE-FPGA/Web-panels/Two-Switches/panel.html)  \n(You should use a Browser that support **Webserial**, like **Chrome**)  \nYou do not need to install anything. Just the browser\n\n[Panel Image](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/Two-Switches/wiki/panel-01.png)\n\n![](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/Two-Switches/wiki/panel-01.png)');
gettext('## Youtube Video\n\n[Link](https://www.youtube.com/watch?v=n8WTWNlL8CA)\n\n[![Click to see the youtube video](http://img.youtube.com/vi/n8WTWNlL8CA/0.jpg)](https://www.youtube.com/watch?v=n8WTWNlL8CA)');
gettext('03-switchx2-pushbtn-LEDx3');
gettext('# Example 3: Push button\n\nExample of two virtual switches and one PushButton  \nVirtual switch \"a\" connected to LED7  \nVirtual switch \"b\" connected to LED4  \nVirtual pulshbutton \"c\" connected to LED0');
gettext('## Web panel for testing\n\nFor testing this example upload it to the  \nFPGA and connect to the [2 switches - 1 Pushbutton WEB panel](https://fpgawars.github.io/LOVE-FPGA/Web-panels/Two-Switches-One-Pushbutton/panel.html)  \n(You should use a Browser that support **Webserial**, like **Chrome**)  \nYou do not need to install anything. Just the browser\n\n[Panel Image](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/Two-Switches/wiki/panel-01.png)\n\n![](https://raw.githubusercontent.com/FPGAwars/LOVE-FPGA/master/Web-panels/Two-Switches-One-Pushbutton/wiki/panel-01.png)');
gettext('## Youtube Video\n\n[Link](https://www.youtube.com/watch?v=n8WTWNlL8CA)\n\n[![Click to see the youtube video](http://img.youtube.com/vi/uycGad61imk/0.jpg)](https://www.youtube.com/watch?v=uycGad61imk)');
gettext('04-switchx2-pushbtnx2-LEDx4');
gettext('# Example 4: Two switches and two Pushbuttons\n\nVirtual switch \"a\" connected to LED7  \nVirtual switch \"b\" connected to LED5  \nVirtual pulshbutton \"c\" connected to LED2\nVirtual pushbutton \"d\" connected to LED0');
gettext('## Web panel for testing\n\nFor testing this example upload it to the  \nFPGA and connect to the [2 switches - 2 Pushbuttons WEB panel](https://fpgawars.github.io/LOVE-FPGA/Web-panels/Two-Switches-Two-PushButtons/panel.html)  \n(You should use a Browser that support **Webserial**, like **Chrome**)  \nYou do not need to install anything. Just the browser\n\n[Panel Image](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/Two-Switches-Two-PushButtons/wiki/panel-01.png)\n\n![](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/Two-Switches-Two-PushButtons/wiki/panel-01.png)');
gettext('05-Virtual-LED');
gettext('Button-tic: Configurable button that emits a tic when it is pressed');
gettext('Configurable button (pull-up on/off. Not on/off)');
gettext('FPGA internal pull-up configuration on the input port');
gettext('Select positive or negative logic for the input (0=positive, 1=negative)');
gettext('Valor genérico constante, de 1 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('XOR gate: two bits input xor gate');
gettext('Remove the rebound on a mechanical switch');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input. Block implementation');
gettext('16-bits Syscounter with reset');
gettext('Inc1-16bit: Increment a 16-bits number by one');
gettext('AdderK-16bit: Adder of 16-bit operand and 16-bit constant');
gettext('Generic: 16-bits generic constant');
gettext('Adder-16bits: Adder of two operands of 16 bits');
gettext('Bus16-Split-half: Split the 16-bits bus into two buses of the same size');
gettext('Adder-8bits: Adder of two operands of 8 bits');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of the same size');
gettext('Adder-4bits: Adder of two operands of 4 bits');
gettext('Adder-1bit: Adder of two operands of 1 bit');
gettext('AdderC-1bit: Adder of two operands of 1 bit plus the carry in');
gettext('OR2: Two bits input OR gate');
gettext('Constant bit 0');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('Bus8-Join-half: Join the two same halves into an 8-bits Bus');
gettext('AdderC-4bits: Adder of two operands of 4 bits and Carry in');
gettext('AdderC-8bits: Adder of two operands of 8 bits and Carry in');
gettext('Bus16-Join-half: Join the two same halves into an 16-bits Bus');
gettext('16-Sys-reg-rst: 16 bits system register with reset. Verilog implementation');
gettext('Sync-x01: 1-bit input with the system clock domain (Verilog implementation)');
gettext('### Virtual LED');
gettext('### Real LED');
gettext('## Example 5: One Virtual LED  \n\nWhen the real pushbutton is pressed, both  \nthe Virtual LED and the real LED are turned on');
gettext('## Youtube Video\n\n[Link](https://www.youtube.com/watch?v=n8WTWNlL8CA)\n\n[![Click to see the youtube video](http://img.youtube.com/vi/ycp8d5fJK6Q/0.jpg)](https://www.youtube.com/watch?v=ycp8d5fJK6Q)');
gettext('## Web panel for testing\n\nFor testing this example upload it to the  \nFPGA and connect to the [One LED WEB panel](https://fpgawars.github.io/LOVE-FPGA/Web-panels/One-LED/panel.html)  \n(You should use a Browser that support **Webserial**, like **Chrome**)  \nYou do not need to install anything. Just the browser\n\n[Panel Image](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/One-LED/wiki/panel-01.png)\n\n![](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/One-LED/wiki/panel-01.png)');
gettext('Button state signal');
gettext('Tic: button pressed');
gettext('Rising edge detector');
gettext('Pull up on/off');
gettext('Not on/off');
gettext('Internal pull-up  \n* 0: OFF\n* 1: ON');
gettext('Synchronization stage');
gettext('Normalization stage\n\n* 0: Wire\n* 1: signal inverted');
gettext('Debouncing stage');
gettext('### Pull-up parameter:\n\n0: No pull-up  \n1: Pull-up activated');
gettext('Only an FPGA pin can  \nbe connected here!!!');
gettext('The pull-up is connected  \nby default');
gettext('When k=0, it works like a wire  \n(The output is equal to the input)  \nWhen k=1, it act as a not gate\n(The output is the inverse of the input)');
gettext('### Truth table for XOR\n\n| k | input | output | function |\n|---|-------|--------|----------|\n| 0 | 0     |  0     | wire     |\n| 0 | 1     |  1     | wire     |\n| 1 | 0     |  1     | Not      |\n| 1 | 1     |  0     | Not      |');
gettext('Edge detector');
gettext('Whenever there is a change in  \nthe input, the counter is started');
gettext('If the counter reaches it maximum  \nvalue, the input is considered stable  \nand it is captured');
gettext('### Time calculation\n\nFor CLK=12MHZ, a 16-bit counter reaches its  \nmaximum every 2 ** 16 * 1/F = 5.5ms aprox  \nIF more time is needed for debouncing,  \nuse a counter with more bits (17, 18...)');
gettext('## Debouncer  \n\nA value is considered stable when  \nthere is no changes during 5.5ms  \naprox. When a value is stable it is  \ncaptured on the output flip-flop');
gettext('Stable output');
gettext('Counter');
gettext('## Edges detector\n\nIt generates a 1-period pulse (tic) when an edge (Rising or falling) is detected on the  \ninput signal');
gettext('The output is 1 if the current value is 1 and the  \nprevious 0, or if the current value is 0 and the  \nprevious 1\n');
gettext('In any other case the output is 0');
gettext('06-Virtual-LED-blink');
gettext('Simplified-Heart-Hz-sys-32bits: periodic signal in Hertz. Duty cicle of 50 percent');
gettext('SR1-32bits: Shift  a 32-bit value one bit right. MSB is filled with the input  in');
gettext('Bus32-Split-31-1: Split the 32-bits bus into two buses of 31 and 1 wires');
gettext('Bus32-Join-1-31: Join the two buses into an 32-bits Bus');
gettext('Unit-hz-32bits: hz to cycles converter');
gettext('Heart-sys-zero-32bits: Generate a periodic signal of period T cycles. It starts at cycle 0. It never stops');
gettext('Sys-Delay-xN-32bits: The input tic is delayed N cycles');
gettext('Counter-M-x32: 32-bits M module counter with reset');
gettext('Inc1-32bit: Increment a 32-bits number by one');
gettext('AdderK-32bit: Adder of 32-bit operand and 32-bit constant');
gettext('Generic: 32-bits generic constant');
gettext('Adder-32bits: Adder of two operands of 32 bits');
gettext('Bus24-Join-8-16: Join the two buses into an 24-bits Bus');
gettext('Bus32-Split-8-24: Split the 28-bits bus into two buses of 8 and 24 wires');
gettext('Bus24-Split-16-8: Split the 24-bits bus into two buses of 16 and 8 wires');
gettext('Bus32-Join-8-24: Join the two buses into an 32-bits Bus');
gettext('Geu-32-Bits_v: 32-bit Unsigned Greather than or equal comparator. Verilog implementation');
gettext('32-Reg-rst: 32 bits Register with reset. Verilog implementation');
gettext('start: Start signal: It goes from 1 to 0 when the system clock starts. 1 cycle pulse witch. Block implementation');
gettext('TFF-verilog. System TFF with toggle input: It toogles on every system cycle if the input is active. Verilog implementation');
gettext('## Example 6: One Virtual LED blinking  \n\nBoth, the virtual LED and the Real LEAD are blinking');
gettext('## Youtube Video\n\n[Link](https://www.youtube.com/watch?v=Mi0ew0z-PlU)\n\n[![Click to see the youtube video](http://img.youtube.com/vi/Mi0ew0z-PlU/0.jpg)](https://www.youtube.com/watch?v=Mi0ew0z-PlU)');
gettext('Dividir entre dos el periodo  \n(Multiplicar por 2 la frecuencia)  ');
gettext('Input parameter: Milieconds  ');
gettext('Input parameter:  \nSystem Frequency');
gettext('Delay');
gettext('Start a new period');
gettext('Start at cycle 0!');
gettext('Repeat!');
gettext('Current period ended  \nStart a new one');
gettext('Periodo (in system clock cycles)');
gettext('Current cycle in the period  \n(0-T-1)');
gettext('Cycles to delay');
gettext('Delay finished!');
gettext('Machine state: ON/OFF');
gettext('RS Flip-Flop');
gettext('Circuit state:  \n* ON: working (1)\n* OFF: Not working (0)');
gettext('The counter has reached  \nthe number of cycles  \nto delay');
gettext('Maximum count  \nreached');
gettext('32-bits register');
gettext('If the max count is reached  \nand the cnt tic is received,  \nthe register is reset to 0');
gettext('External reset');
gettext('Initial value: 1');
gettext('Initial value: 0');
gettext('Falling edge');
gettext('07-Virtual-LEDx2-counter');
gettext('Simplified-Heart-tic-sec-sys-32bits: Nominal periodic signal in seconds');
gettext('Unit-s-32bits: seconds to cycles converter');
gettext('Counter-rst-x02: 2-bits counter with reset');
gettext('Inc1-2bit: Increment a 2-bits number by one');
gettext('AdderK-2bit: Adder of 2-bit operand and 2-bit constant');
gettext('Generic: 2-bits generic constant (0,1,2,3)');
gettext('Adder-2bits: Adder of two operands of 2 bits');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('Bus2-Join-all: Joint two wires into a 2-bits Bus');
gettext('02-Reg-rst: 2 bits Register with reset. Verilog implementation');
gettext('### Virtual LEDs');
gettext('## Example 7: 2-bits counter on Virtual LEDs  \n\nA 2-bit counter is shown in both Virtual LEDs and  \nreal LEDs');
gettext('### Real LEDs');
gettext('## Youtube Video\n\n[Link](https://www.youtube.com/watch?v=onP4iw8JE2E)\n\n[![Click to see the youtube video](http://img.youtube.com/vi/onP4iw8JE2E/0.jpg)](https://www.youtube.com/watch?v=onP4iw8JE2E)');
gettext('## Web panel for testing\n\nFor testing this example upload it to the  \nFPGA and connect to the [Two LEDs WEB panel](https://fpgawars.github.io/LOVE-FPGA/Web-panels/Two-LEDs/panel.html)  \n(You should use a Browser that support **Webserial**, like **Chrome**)  \nYou do not need to install anything. Just the browser\n\n[Panel Image](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/Two-LEDs/wiki/panel-03.png)\n\n![](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/Two-LEDs/wiki/panel-03.png)');
gettext('Reset the counter');
gettext('### COUNTER');
gettext('08-switchx4-pushbtnx4-LEDx8');
gettext('## INPUTS: Switches');
gettext('## Example 8: 4-Switches, 4 Pushbuttons and 8 LEDs  \n\nThe switches and Pushbottons are connected to both 8 real LEDs and to 8 virtual LEDs');
gettext('From PC');
gettext('## INPUTS: Pushbuttons');
gettext('Show the switches and  \nbuttons on the real LEDs');
gettext('## OUTPUT: LEDs');
gettext('Show the Switches');
gettext('Show the PUshbuttons');
gettext('to PC');
gettext('## Web panel for testing\n\nFor testing this example upload it to the  \nFPGA and connect to the [4 Switches, 4 pushbuttons and 8 LEDs](https://fpgawars.github.io/LOVE-FPGA/Web-panels/04-Switches-04-Buttons-08-LEDs/panel.html)  \n(You should use a Browser that support **Webserial**, like **Chrome**)  \nYou do not need to install anything. Just the browser\n\n[Panel Image](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/04-Switches-04-Buttons-08-LEDs/wiki/panel-01.png)\n\n![](https://github.com/FPGAwars/LOVE-FPGA/raw/master/Web-panels/04-Switches-04-Buttons-08-LEDs/wiki/panel-01.png)');
gettext('## Youtube Video\n\n[Link](https://www.youtube.com/watch?v=gS7hlhaEK2s)\n\n[![Click to see the youtube video](http://img.youtube.com/vi/gS7hlhaEK2s/0.jpg)](https://www.youtube.com/watch?v=gS7hlhaEK2s)');
gettext('01-LEDs');
gettext('02-Switch');
gettext('03-Button');
gettext('04-Mix');
gettext('01-LED-real-virt');
gettext('Un bit constante a 1');
gettext('### Ejemplo 1: LED Virtual y LED real\n\nEjemplo hola mundo. Se enciende un LED real y uno Virtual\n');
gettext('**LED Real**');
gettext('Nombre de la variable booleana  \nde salida (sólo una letra)');
gettext('02-LED-real-virt-b');
gettext('### Ejemplo 2: LED Virtual y LED real\n\nEjemplo hola mundo. Se enciende un LED real y uno Virtual  \nEl LED está asocido a la variable \"b\" en vez de a la \"a\"\n');
gettext('03-LED-parpadeante');
gettext('### Ejemplo 3: LED Virtual y LED real parpadeantes\n\nUn LED real y uno virtual se hacen parpadear a la frecuencia  \nde 1 Hz. El LED virtual está asociado a la variable booleana a\n');
gettext('04-LED-virtual-pulsador-real');
gettext('### Ejemplo 4: LED Virtual y LED real conectados a un pulsador real\n\nLos LEDs Virtual y real se encienden y apagan apretando  \nun pulsador real\n');
gettext('**Pulsador Real**');
gettext('Antirrebotes');
gettext('05-LED-virtualx2-alternantes');
gettext('### Ejemplo 5: Dos LEDs alternantes\n\nEste circuito hace parpadear alternativamente los LEDs 7 y 0 y los LEDs  \nvirtuales a y b\n\n');
gettext('**LEDs Reales**');
gettext('**LEDs Virtuales**');
gettext('Un bit y su negado');
gettext('i[1]: Variable a  \ni[0]: Variable b  ');
gettext('06-LED-virtualx2-pulsadores-realesx2');
gettext('### Ejemplo 6: Dos LEDs controlados por pulsadores reales\n\nEl pulsador externo SW1 controla el LED virtual a y el LED real 7, y el  \npulsador SW2 controla el b y el LED6\n\n');
gettext('Bus de 2 bits con los pulsadores:  \ni[1]: SW1  \ni[0]: SW2');
gettext('07-Contador-4bits-LEDs-virtuales');
gettext('Contador módulo M, ascendente, de 4 bits, con reset ');
gettext('Simplified-Heart-tic-hz-sys-32bits: Nominal periodic signal in hz');
gettext('### Ejemplo 7: Contador de 4 bits en LEDs\n\nEl contador se incrementa cada segundo y muestra el resultado en 4  \nLEDs reales y en 4 LEDs virtuales. Con el pulsador sW1 se hace un reset\n\n');
gettext('**Parámetro**: Módulo del contador');
gettext('08-LEDsx3-conf1');
gettext('Separador de bus de 3-bits');
gettext('Counter-x03: 3-bits counter');
gettext('Inc1-3bit: Increment a 3-bits number by one');
gettext('AdderK-3bit: Adder of 3-bit operand and 3-bit constant');
gettext('Generic: 3-bits generic constant (0-7)');
gettext('Adder-3bits: Adder of two operands of 3 bits');
gettext('Bus3-Split-all: Split the 3-bits bus into three wires');
gettext('Bus3-Join-all: Joint three wires into a 3-bits Bus');
gettext('03-Reg: 3 bits Register. Verilog implementation');
gettext('### Ejemplo 8: Conexión de 3 LEDs virtuales (CONFIGURACIÓN 1)\n\nConexión de 3 LEDs mediante el encadenado de dos bloques LEDx1-bus y  \nuno LEDx1-tx\n\n');
gettext('Contador de 3 bits');
gettext('Señales de realimentación:  \nSe inyectan en el bus');
gettext('El primer elemento debe estar  \nconectado al que hace la  \ntransmisión (sufijo tx)');
gettext('**LEDx1-BUS**');
gettext('**LEDx1-TX**');
gettext('08-LEDsx3-conf2');
gettext('Separador de bus de 3-bits, en dos de2 y 1 bits');
gettext('### Ejemplo 8: Conexión de 3 LEDs virtuales (CONFIGURACIÓN 2)\n\nConexión de 3 LEDs mediante el encadenado de un bloque LEDx2-bus y  \nuno LEDx1-tx\n\n');
gettext('**LEDx2-BUS**');
gettext('08-LEDsx3-conf3');
gettext('### Ejemplo 8: Conexión de 3 LEDs virtuales (CONFIGURACIÓN 3)\n\nConexión de 3 LEDs mediante el encadenado de un bloque LEDx1-bus y  \nuno LEDx2-tx\n\n');
gettext('**LEDx2-TX**');
gettext('09-LEDsx8-conf1');
gettext('08-SL: 8 bits shift left register. Verilog implementation');
gettext('### Ejemplo 9: Conexión de 8 LEDs virtuales (Configuración 1)\n\nEjemplo de uso de 8 LEDs virtuales (y reales) \nSe realiza una rotación de un bit hacia la izquierda a la frecuencia de 4Hz\n\n');
gettext('Registro de desplazamiento  \nhacia la izquierda');
gettext('Valocidad del  \ndesplazamiento');
gettext('El bit de mayor peso se  \nintroduce por el de menor  \n(rotación)');
gettext('**8 LEDs virtuales**');
gettext('**8 LEDs reales**');
gettext('09-LEDsx8-conf2');
gettext('### Ejemplo 9: Conexión de 8 LEDs virtuales (Configuración 2)\n\nEjemplo de uno de 8 LEDs virtuales (y reales) usando dos bloques de 4 LEDs  \nSe realiza una rotación de un bit hacia la izquierda a la frecuencia de 4Hz\n\n');
gettext('**LEDx4-bus**');
gettext('**LEDx4-tx**');
gettext('01-LED-real-virt');
gettext('02-LED-real-virt-b');
gettext('03-LED-parpadeante');
gettext('04-LED-virtual-pulsador-real');
gettext('05-LED-virtualx2-alternantes');
gettext('06-LED-virtualx2-pulsadores-realesx2');
gettext('07-Contador-4bits-LEDs-virtuales');
gettext('08-LEDsx3-conf1');
gettext('08-LEDsx3-conf2');
gettext('08-LEDsx3-conf3');
gettext('09-LEDsx8-conf1');
gettext('09-LEDsx8-conf2');
gettext('10-Switch-LED');
gettext('### Ejemplo 10: Un Interruptor virtual\n\nUn interruptor virtual conectado a un LED real y   \na otro virtual');
gettext('Nombre de la variable  \nbooleana de entrada');
gettext('Variable booleana de salida');
gettext('**Interruptor virtual**');
gettext('**LED virtual**');
gettext('**LED real**');
gettext('11-Switch-LED-2');
gettext('### Ejemplo 11: Un Interruptor virtual\n\nUn interruptor virtual conectado a un LED real y   \na otro virtual. El interruptor de entrada está asociado a la  \nvariable boolena \"b\" y el LED a la \"c\"');
gettext('12-Switch-NOT-LED');
gettext('### Ejemplo 12: Probando una puerta NOT\n\nComprobando una puerta NOT. La entrada se establece desde el  \ninterruptor virtual a, y su salida se visualiza en el LED7 y en  \nel LED virtual \"b\"');
gettext('**Puerta NOT**');
gettext('13-Switch-shift-LEDsx8');
gettext('Multiplexor de 2 a 1');
gettext('### Ejemplo 13: Desplazamiento de bits a dos velocidades\n\nUtilizamos un interruptor virtual para establecer la velocidad del  \ndesplazamiento de 8 bits: lenta o rápida\n\n');
gettext('Velocidad rápida');
gettext('Si no se indican los nombres de las 8  \nvariables booleanas, se utilizan por  \ndefecto los nombres a - h (los que hay  \nen el panel)');
gettext('Velocidad lenta');
gettext('Multiplexor de  \nselección de velocidad:  \n0: Lenta  \n1: Rápida');
gettext('14-Switchx2-LEDsx2');
gettext('### Ejemplo 14: Dos interruptores conectados a dos LEDs\n\nSe usan dos interruptores de entrada, asociados a la variables a y b, que  \ncontrolan directamente los LEDs virtuales g y h respectivamente, así como los  \nLEDs reales 1 y 0\n');
gettext('**2 LEDs reales**');
gettext('**Dos Interruptores virtuales**');
gettext('**2 LEDs virtuales**');
gettext('15-Switchx2-Puerta-AND');
gettext('### Ejemplo 15: Probando la puerta AND\n\nSe usan dos interruptores de entrada, asociados a la variables a y b, para  \nprobar el funcionamiento de una puerta AND de dos entradas cuya salida se  \nconecta al LED virtual h y LED real 0. Sólo cuando ambos interruptores estén  \nactivados, el LED se encenderá\n');
gettext('**Puerta AND**');
gettext('Interruptor a');
gettext('Interruptor b');
gettext('16-Switchx4-LEDs');
gettext('### Ejemplo 16: Cuatro Interruptores conectados a LEDs\n\nLos cuatro interruptores de entrada: a,b,c y d se conectan directamente  \na los 4 LEDs virtuales: e, f, g y h, así como a cuatro LEDs reales: 0 - 3');
gettext('**LED reales**');
gettext('**Cuatro Interruptores virtuales**');
gettext('**LED virtuales**');
gettext('17-Switchx4-suma-numeros-2bits');
gettext('2-bits 2-ops adder with carry');
gettext('Separador de bus de 4-bits en buses de 2 bits');
gettext('### Ejemplo 17: Suma de dos números de dos bits\n\nPor los interruptores a y b se introduce un número de dos bits. Por los  \ninterruptores c y d otro número de 2 bits. Ambos números se suman y  \nel resultado se muestra por los LEDs virtuales f, g y h, así como por los LEDs  \nreales 2, 1 y 0');
gettext('**LEDs virtuales**');
gettext('**Operando 1**');
gettext('**Operando 2**');
gettext('**Sumador**');
gettext('18-Switchx3-bus-LEDs');
gettext('Agregador de 3 cables en un bus de 3-bits');
gettext('### Ejemplo 18: Encadenamiento de 3 interruptores\n\nLos interruptores están asociados a las variables booleanas a, b y c  \nEstán conectados a tres LEDs virtuales: f, g y h, y a 3 LEDs reales: 2,1 y 0');
gettext('### Interruptores virtuales');
gettext('### LEDs virtuales');
gettext('### LEDs reales');
gettext('10-Switch-LED');
gettext('11-Switch-LED-2');
gettext('12-Switch-NOT-LED');
gettext('13-Switch-shift-LEDsx8');
gettext('14-Switchx2-LEDsx2');
gettext('15-Switchx2-Puerta-AND');
gettext('16-Switchx4-LEDs');
gettext('17-Switchx4-suma-numeros-2bits');
gettext('18-Switchx3-bus-LEDs');
gettext('19-Button-LED');
gettext('### Ejemplo 19: Un pulsador conectado a un LED\n\nEjemplo de uso de un pulsador. El pulsador virtual e se conecta con el LED virtual a  \ny con el LED real 0. Al apretar el pulsador se encience el LED, y se apaga al soltarlo');
gettext('20-Button-memory-LED');
gettext('### Ejemplo 20: Un pulsador con memoria conectado a un LED\n\nEjemplo de pulsador con memoria. Al pulsarlo se mantiene el LED encendido. Al volver a  \npulsarlo se apaga');
gettext('Biestable T');
gettext('21-Button-Counter-4-bits-LEDs');
gettext('Counter-x04: 4-bits counter');
gettext('Inc1-4bit: Increment a 4-bits number by one');
gettext('AdderK-4bit: Adder of 4-bit operand and 4-bit constant');
gettext('Generic: 4-bits generic constant (0-15)');
gettext('04-Reg: 4 bits Register. Verilog implementation');
gettext('### Ejemplo 21: Contador de pulsaciones del botón virtual e\n\nCada vez que se pulsa el botón virtual e, se incrementa un contador de 4 bits, que se  \nmuestra en los LEDs virtuales y los LEDs reales');
gettext('Contador');
gettext('**Pulsador Virtual**');
gettext('**LEDs reales**');
gettext('22-Button-sequence-LEDs');
gettext('Circuito combinacional de 4 entradas y 8 salidas');
gettext('Unit-ms-32bits: ms to cycles converter');
gettext('Mach-count-4-bits: 4-bits count machine');
gettext('1-to-2 DeMultplexer (1-bit channels)');
gettext('OR-BUS4-verilog: OR gate with 4-bits bus input. Verilog implementation');
gettext('### Ejemplo 22: Arranque de una secuencia en los LEDs\n\nCada vez que se aprieta el pulsador virtual e arranca una secuencia en los LEDs');
gettext('Máquina de  \ncontar');
gettext('Arranque de  \nla máquina');
gettext('Siguiente valor  \nde la secuencia');
gettext('If the machine is active, no more start signals  \nare allowed to enter');
gettext('Execution tic:  \n* One tic per state');
gettext('counter');
gettext('1-to-2 Demux');
gettext('Turn off  \nthe machine');
gettext('n>0');
gettext('n=0');
gettext('The next signal can only go inside the machine  \nif it is busy');
gettext('The machine is busy from the very  \nbegining in which the start_ok  \nsignal arrives');
gettext('Initial state cycle  \n(n = 0)');
gettext('When the next_ok signal is received  \nthe initial cycles is finished');
gettext('When the next_ok is received the counter is  \nincreased');
gettext('The machine is active: either in the first  \nstate cycle (n=0) or the next cycles (n>0)');
gettext('Wait one cycle for the  \ncounter to be updated');
gettext('The next_ok signal output either as the  \nexec signal (when n=1) or as the done signal  \nwhen (n = 0)');
gettext('Then count machine has three states:  \n\n* Idle: The machine is off, waiting to receive the start signal  \n* n = 0: Initial state cycle. It goes from receiveing the start signal until  \n  the first next signal arrives\n* n > 0: state cycles. From the first next signal to the fourth');
gettext('¿State different than 0?');
gettext('23-Buttonx2-counter-reset-LED');
gettext('### Ejemplo 23: Dos pulsadores: Contador con reset e incremento manual\n\nEjemplo de uso de dos pulsadores.  Un se usa para incrementar el contador de 4 bits.  \nEl otro para hacer un reset');
gettext('**Pulsadores Virtuales**');
gettext('24-Buttonx2-left-right-LED');
gettext('Contador ascendente/descendente de 3 bits');
gettext('Decoder-3-8:  3 to 8 decoder. Output bus');
gettext('Bus8-Join-all: Join all the wires into a 8-bits Bus');
gettext('Decoder-3-8:  3 to 8 decoder');
gettext('Decoder-1-2:  1 to 2 decoder');
gettext('Bus3-Split-1-2: Split the 3-bits bus into two: 1-bit and 2-bits buses');
gettext('Decoder-2-4:  2 to 4 decoder. Output bus');
gettext('Decoder-2-4:  2 to 4 decoder');
gettext('AND-Busen-4: Enable a 4-bits bus. When the enable signal is 0, the output is 0');
gettext('### Ejemplo 24: Dos pulsadores: Movimiento hacia la izquierda y derecha\n\nEjemplo de uso de dos pulsadores.  Se mueve un LED hacia la izquierda y la derecha  \ncon los pulsadores virtuales e y f');
gettext('Decodificador de 3 a 8');
gettext('Active when the input  \nis 4-7');
gettext('Active when the input  \nis 0-3');
gettext('## Truth table\n\n| input   |  o7     | o6     | o5     | o4     | o3     | o2    | o1     | o0     |\n|---------|---------|--------|--------|--------|--------|-------|--------|--------|\n| 000     |   0     | 0      |  0     | 0      | 0      | 0     |  0     | **1**  |\n| 001     |   0     | 0      |  0     | 0      | 0      | 0     |  **1** | 0      |\n| 010     |   0     | 0      |  0     | 0      | 0      | **1** |  0     | 0      |\n| 011     |   0     | 0      |  0     | 0      | **1**  | 0     |  0     | 0      |\n| 100     |   0     | 0      |  0     | **1**  | 0      | 0     |  0     | 0      |\n| 101     |   0     | 0      |  **1** | 0      | 0      | 0     |  0     | 0      |\n| 110     |   0     | **1**  |  0     | 0      | 0      | 0     |  0     | 0      |\n| 111     |   **1** | 0      |  0     | 0      | 0      | 0     |  0     | 0      |\n\n');
gettext('## Truth table\n\n|i  |  o1 | o0 |\n|---|-----|----|\n|0  |  0  |  1 |\n|1  |  1  |  0 |');
gettext('## Truth table\n\n| input  |  o3 | o2 | o1 | o0 |\n|--------|-----|----|----|----|\n| 00     |   0 | 0  |  0 | 1  |\n| 01     |   0 | 0  |  1 | 0  |\n| 10     |   0 | 1  |  0 | 0  |\n| 11     |   1 | 0  |  0 | 0  |\n\n');
gettext('Enable input');
gettext('Bus input');
gettext('Bus output');
gettext('25-Buttonx4-LEDs');
gettext('### Ejemplo 25: Cuatro pulsadores virtuales en 4 LEDs\n\nEjemplo de uso de cuatro pulsadores virtuales.  Sus valores se muestra en los LEDs   \nvirtuales e,f,g y h, y en los LEDs reales 3,2,1 y 0');
gettext('**Cuatro Pulsadores virtuales**');
gettext('26-Buttonx3-LEDs-bus');
gettext('### Ejemplo 26: Encadenamiento de tres Pulsadores\n\nEncadenamiento de 3 pulsadores virtuales: un bloque pushbuttonx1-rx y  \ndos bloques pushbuttonx1-bus, conectados a 3 LEDs virtuales y reales');
gettext('### Pulsadores virtuales');
gettext('19-Button-LED');
gettext('20-Button-memory-LED');
gettext('21-Button-Counter-4-bits-LEDs');
gettext('22-Button-sequence-LEDs');
gettext('23-Buttonx2-counter-reset-LED');
gettext('24-Buttonx2-left-right-LED');
gettext('25-Buttonx4-LEDs');
gettext('26-Buttonx3-LEDs-bus');
gettext('27-Captura-dato-4bits');
gettext('04-Reg-rst: 4 bits Register with reset. Verilog implementation');
gettext('### Ejemplo 27: Captura de un dato de 4 bits\n\nCaptura del dato de 4 bits introducido por los interrutpores virtuales a,b,c y d.  \nPrimero se accionan los interruptores para especificar el número y luego se aprieta  \nel pulsador virtual e para realizar la carga. Con el pulsador virtual f se hace un reset  \nLa salida del registro se muestra por los 4 LEDs virtuales e,f,g y h, y por los 4 LEDs  \nreales 3,2,1 y 0');
gettext('**4 Interruptores Virtuales** ');
gettext('Dato a almacenar  \nen el registro');
gettext('**Pulsador** ');
gettext('Tic de carga  \nen el registro');
gettext('Señal de  \nreset');
gettext('**Registro de 4 bits**');
gettext('## ENTRADAS');
gettext('## SALIDAS');
gettext('**4 LEDs virtuales** ');
gettext('**LEDs reales** ');
gettext('28-Captura-dato-8bits');
gettext('04-SL-ld-rst: 4 bits shift left register with load and reset. Verilog implementation');
gettext('### Ejemplo 28: Captura y manipulación de un dato de 8 bits\n\nPor los interruptores se introducen un dato de 4 bits, que luego  \nse carga en la parte alta del registro o la baja según que se  \napriete el pulsador virtual e ó f. Con el pulsador g se hace un  \ndesplazamiento hacia la izquierda del registro de 8 bits  \nCon el pulsador h se hace un reset');
gettext('**4 Pulsadores Virtuales** ');
gettext('**8 LEDs virtuales** ');
gettext('Tic de carga en los 4 bits  \nde mayor peso del registro');
gettext('Tic de carga en los 4 bits  \nde menor peso del registro');
gettext('Tic de desplazamiento  \na la izquierda del reg. de  \n8 bits');
gettext('Registro de 4 bits  \n4-bits de menor peso');
gettext('Registro de 4 bits  \n4-bits de MAYOR peso');
gettext('Registro de desplazamiento de 8-bits con entrada paralelo y reset  \nEstá creado a partir de dos registros de desplazamienot de  \n4 bits');
gettext('El bit de mayor peso que sale  \npor el reg al desplazarse se  \nintroduce en el otro registro  \npor el bit de menor peso');
gettext('29-Calc-suma-4-bits');
gettext('Sumador  de 4 bits (con acarreo)');
gettext('Demultiplexor de 1 bit, de 2 a 4');
gettext('Máquina de contar, de 2 bits (cuenta hasta 4 ciclos)');
gettext('Sumador de un operando de 2 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Comparador de dos operandos de 2 bits');
gettext('Valor genérico constante (menos 1), de 2 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('### Ejemplo 29: Calculadora de suma de dos números de 4-bits\n\nIntroducir el primer número en los switches y apretar el botón virtual  \nde ENTER (e). Introducir el segundo número en los switches y apretar  \nvez el pulsador de ENTER. En los LEDs virtuales y en los reales  \nse mostrará el resultado de la suma y se vuelve al estado inicial  \nLos LEDs virtuales a y b indican el operando que se está esperando a  \nintroducir. El LED a indica que es el primer operando y el b el segundo  \nCon el pulsador de reset se descarta la entrada actual y se vuelve al  \ninicio');
gettext('Operando');
gettext('Cargar un  \noperando');
gettext('Volver al  \ncomienzo');
gettext('Descartar entrada actual y  \nvolver al estado inicial');
gettext('Se ha introducido un  \noperando');
gettext('**5 LEDs virtuales: RESULTADO** ');
gettext('**2 LEDs virtuales: Operando**  \na: Esperando primer operando  \nb: Esperando segundo operando');
gettext('Sumador de números  \nde 4 bits. Salida de  \n4 bits màs el acarreo');
gettext('LEDs de operando  \n01: Primer operando   \n10: Segundo operando  ');
gettext('Estados:  \n0: Esperando operando 1   \n1: Esperando operando 2  \n2: Haciendo operación  \n  (El estado 2 dura 1 ciclo)');
gettext('Generar el tic de ejecución  \nsegún el estado');
gettext('Estado 0:  No se  \ngenera ninguna acción');
gettext('Estado 1:  \nCargar operando 1');
gettext('Estado 2:  \nCargar operando 2');
gettext('Máquina de contar  \ncon 3 estados');
gettext('Addition finished!  \nor aborted');
gettext('Generar la salida en los LEDs  \npara indicar el operando\nEstado 00:  Salida 01  \nEstado 01:  Salida 10');
gettext('Decodificador  \n1 - 2');
gettext('La señal de reset  \naborta la operación  \nactual ');
gettext('La máquina arranca al principio o  \ncuando ha terminado la ejecución  \nanterior (bien con suma o abortando  \ncon reset)');
gettext('Cambiar al siguiente estado cuando el pulsandor\nde ENTER se presiona o cuando la señal load2  \nse haya emitido (el estado 2 sólo dura 1 ciclo)');
gettext('Cargar el operando 1 con  \nel valor actual de los  \ninterruptores');
gettext('Cargar el operando 2 con  \nel valor actual de los  \ninterruptores');
gettext('Durante la carga del primer  \noperando este registro  \nse pone a 0');
gettext('**Reloj del sistema**');
gettext('**Estado de**  \n**la máquina**');
gettext('Máquina encendida');
gettext('Máquina apagada  \n(rst = 1)');
gettext('Tic de arranque');
gettext('Tic de fin');
gettext('**Contador de ciclos**');
gettext('Número de ciclos  \ncontados');
gettext('Valor  \nincrementado');
gettext('### Salidas');
gettext('Estado de la máquina');
gettext('Ciclo actual');
gettext('Cuenta finalizada');
gettext('Ejecutar el ciclo');
gettext('Número de ciclos  \na contar');
gettext('¿Estamos en el  \nciclo k-1?');
gettext('Solo se hace caso a la  \nentrada next si la  \nmáquina está encendida');
gettext('Nuevo ciclo');
gettext('Si es el ciclo k-1 y  \nse pide un ciclo  \nnuevo: Terminar');
gettext('Apagar la  \nmáquina');
gettext('Ciclo nuevo:  \nincrementar la cuenta');
gettext('El tic de start se saca  \npor exec para que se ejecute  \nel primer ciclo');
gettext('Si la máquina está  \napagada, las señales  \nde ejecución no pueden  \nsalir!');
gettext('Retrasar la señal un ciclo  \nmientras que se detecta si  \nla máquina ha finalizado o no');
gettext('Para automático de la  \nmáquina cuando ha terminado  ');
gettext('Paro externo');
gettext('30-inputsx8-LEDs');
gettext('### Ejemplo 30: Cuatro interruptores + Cuatro Pulsadores en los LEDs  \n\nPruebas de TODOS los elementos virtuales del panel web  \nLos 4 interruptores y los 4 pulsadores se muestran en los 8 LEDs virtuales  \nasí como en los reales\n\n');
gettext('27-Captura-dato-4bits');
gettext('28-Captura-dato-8bits');
gettext('29-Calc-suma-4-bits');
gettext('30-inputsx8-LEDs');
gettext('01-pushbutton-test');
gettext('# Test 1: Pushbutton test\n\nTesting the pushbutton-rx and pushbutton-bus blocks  \n');
gettext('01-pushbutton-test');
gettext('01-switch-LED');
gettext('02-switchx2-LEDx2');
gettext('03-switchx2-pushbtn-LEDx3');
gettext('04-switchx2-pushbtnx2-LEDx4');
gettext('05-Virtual-LED');
gettext('06-Virtual-LED-blink');
gettext('07-Virtual-LEDx2-counter');
gettext('08-switchx4-pushbtnx4-LEDx8');
